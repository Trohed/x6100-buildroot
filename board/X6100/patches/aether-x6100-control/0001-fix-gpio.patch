diff -Nuar aether-x6100-control.orig/include/aether_radio/x6100_control/low/gpio.h aether-x6100-control/include/aether_radio/x6100_control/low/gpio.h
--- aether-x6100-control.orig/include/aether_radio/x6100_control/low/gpio.h	2025-02-17 11:59:50.000000000 -0500
+++ aether-x6100-control/include/aether_radio/x6100_control/low/gpio.h	2025-02-18 09:12:12.752044964 -0500
@@ -14,11 +14,5 @@
 #include <stdbool.h>
 #include <stdint.h>
 
-AETHER_X6100CTRL_API extern int x6100_pin_wifi;
-AETHER_X6100CTRL_API extern int x6100_pin_usb;
-AETHER_X6100CTRL_API extern int x6100_pin_light;
-AETHER_X6100CTRL_API extern int x6100_pin_morse_key;
-AETHER_X6100CTRL_API extern int x6100_pin_bb_reset;
-
 AETHER_X6100CTRL_API bool x6100_gpio_init();
-AETHER_X6100CTRL_API void x6100_gpio_set(int pin, int value);
+AETHER_X6100CTRL_API void x6100_gpio_set(const char *name, int value);
diff -Nuar aether-x6100-control.orig/src/low/gpio.c aether-x6100-control/src/low/gpio.c
--- aether-x6100-control.orig/src/low/gpio.c	2025-02-17 11:59:50.000000000 -0500
+++ aether-x6100-control/src/low/gpio.c	2025-02-19 16:59:25.255941735 -0500
@@ -17,45 +17,85 @@
 #include <gpiod.h>
 
 #define EXIT_ON_FALSE(val, msg) ({if (!val) {fprintf(stderr, "%s\n", msg); return false;}})
-#define X6100_PIN_WIFI 357
-#define X6100_PIN_USB 138
-#define X6100_PIN_LIGHT 143
-#define X6100_PIN_MORSE_KEY 203
-#define X6100_PIN_BB_RESET 204
-
 
 static struct gpiod_chip *chip0;
 static struct gpiod_chip *chip1;
-static struct gpiod_line *line_morse_key;
-static struct gpiod_line *line_bb_reset;
-static struct gpiod_line *line_usb;
-static struct gpiod_line *line_light;
-static struct gpiod_line *line_wifi;
-
-
-int x6100_pin_wifi = X6100_PIN_WIFI;
-int x6100_pin_usb = X6100_PIN_USB;
-int x6100_pin_light = X6100_PIN_LIGHT;
-int x6100_pin_morse_key = X6100_PIN_MORSE_KEY;
-int x6100_pin_bb_reset = X6100_PIN_BB_RESET;
+static struct gpiod_line_request *line_morse_key;
+static struct gpiod_line_request *line_bb_reset;
+static struct gpiod_line_request *line_usb;
+static struct gpiod_line_request *line_light;
+static struct gpiod_line_request *line_wifi;
+
+static int x6100_offset_wifi;
+static int x6100_offset_usb;
+static int x6100_offset_light;
+static int x6100_offset_morse_key;
+static int x6100_offset_bb_reset;
 
 
 static bool gpio_chip_open(const char * name, struct gpiod_chip **chip) {
-    *chip = gpiod_chip_open_by_name(name);
+    char *path;
+    int rv;
+    
+    rv = asprintf(&path, "/dev/%s", name);
+    if (rv < 0) {
+        return false;
+    }
+
+    *chip = gpiod_chip_open(path);
+    free(path);
     if (*chip == NULL) {
         return false;
     }
     return true;
 }
 
-static bool gpio_line_open(unsigned int pin, const char * consumer, struct gpiod_chip *chip, int val, struct gpiod_line **line) {
-    *line = gpiod_chip_get_line(chip, pin);
-    if (*line == NULL) {
+static bool gpio_line_open(const char * name, const char * consumer, struct gpiod_chip *chip, int val, struct gpiod_line_request **line, int *offset) {
+    struct gpiod_request_config *req_cfg = NULL;
+    struct gpiod_line_request *request = NULL;
+    struct gpiod_line_settings *settings;
+    struct gpiod_line_config *line_cfg;
+
+    *offset = gpiod_chip_get_line_offset_from_name(chip, name);
+    if (*offset == -1) {
         return false;
     }
-    if (gpiod_line_request_output(*line, consumer, val) != 0) {
+
+    settings = gpiod_line_settings_new();
+    if (!settings) {
         return false;
     }
+
+    gpiod_line_settings_set_direction(settings, GPIOD_LINE_DIRECTION_OUTPUT);
+    gpiod_line_settings_set_output_value(settings, val);
+
+    line_cfg = gpiod_line_config_new();
+    if (!line_cfg) {
+        gpiod_line_settings_free(settings);
+        return false;
+    }
+
+    if (gpiod_line_config_add_line_settings(line_cfg, offset, 1, settings)) {
+        gpiod_line_config_free(line_cfg);
+        gpiod_line_settings_free(settings);
+        return false;
+    }
+
+    if (consumer) {
+        req_cfg = gpiod_request_config_new();
+        if (!req_cfg) {
+            gpiod_line_config_free(line_cfg);
+            gpiod_line_settings_free(settings);
+            return false;
+        }
+        gpiod_request_config_set_consumer(req_cfg, consumer);
+    }
+
+    *line = gpiod_chip_request_lines(chip, req_cfg, line_cfg);
+
+    gpiod_request_config_free(req_cfg);
+    gpiod_line_config_free(line_cfg);
+    gpiod_line_settings_free(settings);
     return true;
 }
 
@@ -64,36 +104,27 @@
     EXIT_ON_FALSE(gpio_chip_open("gpiochip0", &chip0), "Can't open gpio chip 0");
     EXIT_ON_FALSE(gpio_chip_open("gpiochip1", &chip1), "Can't open gpio chip 1");
 
-    EXIT_ON_FALSE(gpio_line_open(X6100_PIN_MORSE_KEY, "X6100_morse_key", chip1, 1, &line_morse_key), "Can't open GPIO morse line");
-    EXIT_ON_FALSE(gpio_line_open(X6100_PIN_BB_RESET, "X6100_bb_reset", chip1, 0, &line_bb_reset), "Can't open GPIO bb reset line");
-    EXIT_ON_FALSE(gpio_line_open(X6100_PIN_USB, "X6100_usb", chip1, 0, &line_usb), "Can't open GPIO usb line");
-    EXIT_ON_FALSE(gpio_line_open(X6100_PIN_LIGHT, "X6100_light", chip1, 0, &line_light), "Can't open GPIO light line");
-    EXIT_ON_FALSE(gpio_line_open(5, "X6100_wifi", chip0, 0, &line_wifi), "Can't open GPIO wifi line");
+    EXIT_ON_FALSE(gpio_line_open("morse_key", "X6100_morse_key", chip1, 1, &line_morse_key, &x6100_offset_morse_key), "Can't open GPIO morse line");
+    EXIT_ON_FALSE(gpio_line_open("bb_reset", "X6100_bb_reset", chip1, 0, &line_bb_reset, &x6100_offset_bb_reset), "Can't open GPIO bb reset line");
+    EXIT_ON_FALSE(gpio_line_open("civ", "X6100_usb", chip1, 0, &line_usb, &x6100_offset_usb), "Can't open GPIO usb line");
+    EXIT_ON_FALSE(gpio_line_open("keyboard_backlight", "X6100_light", chip1, 0, &line_light, &x6100_offset_light), "Can't open GPIO light line");
+    EXIT_ON_FALSE(gpio_line_open("wifi", "X6100_wifi", chip0, 0, &line_wifi, &x6100_offset_wifi), "Can't open GPIO wifi line");
     return true;
 }
 
-void x6100_gpio_set(int pin, int value)
+void x6100_gpio_set(const char *name, int value)
 {
-    switch (pin)
-    {
-    case X6100_PIN_MORSE_KEY:
-        gpiod_line_set_value(line_morse_key, value);
-        break;
-    case X6100_PIN_BB_RESET:
-        gpiod_line_set_value(line_bb_reset, value);
-        break;
-    case X6100_PIN_USB:
-        gpiod_line_set_value(line_usb, value);
-        break;
-    case X6100_PIN_LIGHT:
-        gpiod_line_set_value(line_light, value);
-        break;
-    case X6100_PIN_WIFI:
-        gpiod_line_set_value(line_wifi, value);
-        break;
-
-    default:
-        printf("Unknown pin: %i\n", pin);
-        break;
+    if (strcmp(name, "morse_key") == 0) {
+        gpiod_line_request_set_value(line_morse_key, x6100_offset_morse_key, value);
+    } else if (strcmp(name, "bb_reset") == 0) {
+        gpiod_line_request_set_value(line_bb_reset, x6100_offset_bb_reset, value);
+    } else if (strcmp(name, "civ") == 0) {
+        gpiod_line_request_set_value(line_usb, x6100_offset_usb, value);
+    } else if (strcmp(name, "keyboard_backlight") == 0) {
+        gpiod_line_request_set_value(line_light, x6100_offset_light, value);
+    } else if (strcmp(name, "wifi") == 0) {
+        gpiod_line_request_set_value(line_wifi, x6100_offset_wifi, value);
+    } else {
+        printf("Unknown pin: %s\n", name);
     }
 }
